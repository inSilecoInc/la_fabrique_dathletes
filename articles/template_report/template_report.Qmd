---
title: ""
format:
  html:
    page-layout: full
    toc: false
    html-math-method: katex
    css: styles.css
    include-before-body: header.html
execute:
  echo: false
---


```{r}
#| label: setup
library(echarts4r)
plot_gauge <- function(value, name) {
  formatter_js <- "function (value) {
  if (value === 0.875) {
    return 'Excellent';
  } else if (value === 0.625) {
    return 'Bon';
  } else if (value === 0.375) {
    return 'Moyen';
  } else if (value === 0.125) {
    return 'Faible';
  }
  return '';
}"

  detail_formatter_js <- "function (value) {
  return Math.round(value * 100) + '';
}"

  e_charts(width = "500px", height = "300px") |>
    e_gauge(
      value = value,
      name = name,
      startAngle = 180,
      endAngle = 0,
      center = c("50%", "75%"),
      radius = "90%",
      min = 0,
      max = 1,
      splitNumber = 8,
      axisLine = list(
        lineStyle = list(
          width = 6,
          color = list(
            c(0.25, "#FF6E76"),
            c(0.5, "#FDDD60"),
            c(0.75, "#58D9F9"),
            c(1, "#7CFFB2")
          )
        )
      ),
      pointer = list(
        icon = "path://M12.8,0.7l12,40.1H0.7L12.8,0.7z",
        length = "12%",
        width = 20,
        offsetCenter = c(0, "-60%"),
        itemStyle = list(color = "auto")
      ),
      axisTick = list(
        length = 12,
        lineStyle = list(color = "auto", width = 2)
      ),
      splitLine = list(
        length = 20,
        lineStyle = list(color = "auto", width = 5)
      ),
      axisLabel = list(
        color = "#464646",
        fontSize = 20,
        distance = -60,
        rotate = "tangential",
        formatter = htmlwidgets::JS(formatter_js)
      ),
      title = list(
        offsetCenter = c(0, "-10%"),
        fontSize = 20
      ),
      detail = list(
        fontSize = 20,
        offsetCenter = c(0, "-35%"),
        valueAnimation = TRUE,
        formatter = htmlwidgets::JS(detail_formatter_js),
        color = "inherit"
      )
    )
}
```

<br>

::: {.grid}

::: {.g-col-4}
<b><font size="+3">Athlète</font></b>
:::

::: {.g-col-3}
Nom <br>
John Doe
:::

::: {.g-col-2}
Âge <br>
43
:::

::: {.g-col-2}
Date de l'évaluation <br>
2024-08-06
:::

:::

<hr> 

```{r}
#| label: athlete
#| fig-width: 12
#| fig-height: 2
col <- "#ADA9C7"
labs <- c("Fréquence cardiaque", "Poids", "Taille", "Graisses corporelle")
unt <- c("(Battements / min)", "(kg)", "(cm)", "(%)")
vals <- c(48, 187, 80, 182, 14.1)
par(mar = c(0, 0, 0, 0))
graphicsutils::plot0(x = c(.75, 5.75), y = c(.3, 1))
text(x = c(1.5, 3, 4, 5), y = rep(.95, 4), labels = labs, adj = .5, cex = 1.1, font = 2)
text(x = c(1.5, 3, 4, 5), y = rep(.85, 4), labels = unt, adj = .5, cex = .75, font = 3)
text(x = 1:5, y = rep(.6, 5), labels = vals, adj = .5, cex = 4.5, font = 2, col = col)
text(x = 1:2, y = rep(.4, 2), labels = c("Repos", "Max"), adj = .5, cex = .9, font = 1)
for (x in c(2.5, 3.5, 4.5)) lines(x = c(x, x), y = c(.2, .95), col = "#00000033")
```


```{r}
#| label: radar
library(echarts4r)
df <- data.frame(
  x = c("VO2max", "FTP", "PPO", "FatMax", "Rendement"),
  y = c(.65, .75, .7, .25, .5),
  z = c(1, 1, 1, 1, 1)
)

# e_common(font_family = "Raleway", theme = "wonderland")
e_common(theme = "wonderland")
df |>
  e_charts(x) |>
  e_radar(
    y,
    max = 1,
    name = "Sommaire des résultats",
    areaStyle = list(color = "#ADA9C7AA"),
    itemStyle = list(color = "#ADA9C7"),
    splitNumber = 3
  ) |>
  e_tooltip(trigger = "item")

```

<hr>

<b><font size="+3">Résultats</font></b>

::: {.grid}
::: {.g-col-1}
:::

::: {.g-col-5}

**$VO2_{max}$**

Le $VO2_{max}$ est votre capacité maximale d'absorption de l'oxygène [...]. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.
:::

::: {.g-col-5}


**$FTP$**

La $FTP$ correspond au seuil fonctionnel de puissance [...]. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.
:::
:::


::: {.grid}
::: {.g-col-1}
:::
::: {.g-col-5}

```{r}
plot_gauge(.75, "VO2max")
```
:::
::: {.g-col-5}

```{r}
plot_gauge(.55, "FTP")
```
:::
:::


::: {.grid}
::: {.g-col-1}
:::
::: {.g-col-5}

**$PPO$**

La $PPO$ est la puissance maximale [...]. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.
:::

::: {.g-col-5}
**$FatMax$**

Le $FatMax$ est la quantité maximale de gras qu'un athlète [...]. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.
:::
:::

::: {.grid}
::: {.g-col-1}
:::
::: {.g-col-5}

```{r}
plot_gauge(.75, "PPO")
```
:::
::: {.g-col-5}

```{r}
plot_gauge(.55, "FatMax")
```
:::
:::


::: {.grid}
::: {.g-col-1}
:::
::: {.g-col-5}
**$Rendement$**

Le $rendement$ [...]. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.

```{r}
plot_gauge(.55, "Rendement")
```

:::
:::

<hr>

<b><font size="+3">Zones d'entraînement</font></b>

**$FTP = 273 W$**


```{r}
#| label: zones
#| fig-width: 8
#| fig-height: 5
labs <- c("Fréquence cardiaque", "Poids", "Taille", "Graisses corporelle")
unt <- c("(Battements / min)", "(kg)", "(cm)", "(%)")
vals <- c(48, 187, 80, 182, 14.1)
df <- data.frame(
  min = c(0,153,208,249,290,331,500),
  max = c(152,207,248,289,330,499,1200),
  z = c(glue::glue("Zone {1:7}")),
  desc = c("Récupération","Endurance","Temps","Seuil","VO2max","Capacité anaérobie","Sprint")
)
par(mar = c(0, 0, 0, 0))
graphicsutils::plot0(x = c(0, 10), y = c(0,1200))
for(i in seq_len(nrow(df))) {
  rect(xleft = .1, ybottom = df$min[i], xright = .5, ytop = df$max[i], border = "#00000055", col = viridis::viridis(nrow(df))[i])
  text(
    x = .6, y = mean(c(df$min[i], df$max[i])), adj = c(0,.5), cex = 1, font = 1,
    labels = glue::glue("{df$z[i]} ({df$min[i]} - {df$max[i]}): {df$desc[i]}")
  )
}
```

<hr>

<b><font size="+3">Métriques de performance</font></b>

```{r}
#| label: metrics
dat <- data.frame(
  name = c("SD1","SV2","W1","W2","FTP","LP","FatMax","PPO","VO2max"),
  W = c(150,250,175,240,273,247,155,380,290),
  HR = c(140,167,135,162,174,165,142,182,178),
  NW = c(40,66,35,63,74,65,42,100,76),
  NHR = c(75,89,73,86,93,87,76,97,98),
  RPE = c(4,8,4,7,10,8,5,10,9)
) 

g1 <- dat |> 
  e_charts(name) |> 
  e_line(HR) |> 
  e_line(NHR) |>
  e_tooltip(trigger = "axis") 

g2 <- dat |> 
  e_charts(name) |> 
  e_line(W) |> 
  e_line(NW) |> 
  e_tooltip(trigger = "axis")

g3 <- dat |> 
  e_charts(name) |> 
  e_line(RPE) |> 
  e_tooltip(trigger = "axis") 
  
e_arrange(g1, g2, g3) 
```